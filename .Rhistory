knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
data()
summary(women)
summary(women)
plot(arr)
plot(arr.png)
10. ![]("C:\Users\zbtra\Documents\Sophomore\Spring\Math62\arrr.png")
data(women)
force(women)
1+1
#Variable assignment and making vectors
example_vector <- c(7, 1+1, 6)
#Variable assignment and making vectors
example_vector <- c(7, 1+1, 6)
#Show a variable
print(example_vector)
collatz <- function(n) {
}
collatz(6)
collatz <- function(n) {
if(n%%2 == 0){
n/2
} else {
3*n + 1
}
}
collatz(6)
collatz(7)
collatz_steps <- function(n) {
counter <- 0
while(n>1){
counter <- counter + 1
n <- collatz(n)
}
}
collatz_steps(7)
collatz_steps <- function(n) {
counter <- 0
while(n>1){
counter <- counter + 1
n <- collatz(n)
}
print(counter)
}
collatz_steps(7)
collatz_steps <- function(n) {
counter <- 0
while(n>1){
counter <- counter + 1
n <- collatz(n)
}
counter
}
collatz_steps(7)
sapply(1:20, collatz_steps)
collatz_values <- sapply(1:1000, collataz_step)
plot(x=1:1000,y=collatz_values)
collatz_values <- sapply(1:1000, collataz_step)
collatz_values <- sapply(1:1000, collataz_steps)
plot(x=1:1000,y=collatz_values)
sapply(1:20, collatz_steps)
collatz_values <- sapply(1:1000, collataz_steps)
collatz_values <- sapply(1:1000, collatz_steps)
plot(x=1:1000,y=collatz_values)
cars$speed
summary(cars)
cars$distance
cars$dist
plot(cars)
# We can import data from a spreadsheet
read.csv("coin_flip_data_cleaned_labeled.csv")
# We can import data from a spreadsheet
read.csv("~/Sophomore/Spring/Math62/coin_flip_data_cleaned_labeled.csv")
# We can import data from a spreadsheet
coin_flips = read.csv("~/Sophomore/Spring/Math62/coin_flip_data_cleaned_labeled.csv")
summary(coin_flips)
summary(subset(coin_flips, is_legit == TRUE))
summary(subset(coin_flips, !is_legit))
fake_data <- subset(coin_flips, !is_legit))
real_data <- subset(coin_flips, is_legit == TRUE)
fake_data <- subset(coin_flips, !is_legit)
plot(real_data$heads, real_data$run_count)
plot(fake_data$heads, fake_data$run_count)
))
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(real_data$heads, real_data$run_count)
plot(real_data$heads, real_data$run_count)
plot(fake_data$heads, fake_data$run_count)
plot(real_data$heads, real_data$run_count)
plot(fake_data$heads, fake_data$run_count, xlim=c(0,50), ylim=(0,50))
plot(real_data$heads, real_data$run_count, xlim=c(0,50), ylim=c(0,50))
plot(real_data$heads, real_data$run_count, xlim=c(0,50), ylim=c(0,50))
plot(real_data$heads, real_data$run_count, xlim=c(0,50), ylim=c(0,50))
plot(fake_data$heads, fake_data$run_count, xlim=c(0,50), ylim=c(0,50))
flips <- sample(c("H", "T"), 50, replace=TRUE)
print(flips)
print(flips)
flips <- sample(c("H", "T"), 50, replace=TRUE)
flips <- sample(c("H", "T"), 50, replace=TRUE)
print(flips)
#Making "random" data (PRNG)
set.seed(726)
length(flips[flips=="H"])
2^2
knitr::opts_chunk$set(echo = TRUE)
squares <- c()
i = 0
while (i^2 <= 100){
append(squares, i^2)
i <- i + 1
print(squares)
}
squares
a <- c()
a
append(a, 2)
a
2 == 1
2 ==2
```{r}
factorial2 <- function(n) {
if(n == 0){
1
} else {
n * factorial2(n - 1)
}
}
factorial2(5)
factorial2 <- function(n) {
if(n == 0){
1
} else {
n * factorial2(n - 1)
}
}
choose2 <- function(n, k){
factorial2(n) / (factorial2(k) * factorial2(n-k))
}
choose2(8,5)
choose(8,5)
library(ggplot2)
squares
knitr::opts_chunk$set(echo = TRUE)
squares <- c()
i = 1
while (i^2 <= 100){
squares <- append(squares, i^2)
i <- i + 1
}
squares
ggplot(squares)
1:10
(1:10)^2
ggplot((1:10, (1:10)^2))
ggplot(data.frame(x = 1:10, x_squared = (1:10)^2))
data.frame(x = 1:10, x_squared = (1:10)^2)
ggplot(data.frame(x_squared = (1:10)^2))
data.frame(x_squared = (1:10)^2)
ggplot(data.frame(x_squared = (1:10)^2))
ggplot(data.frame(x_squared = (1:10)^2), aes(x_squared))
ggplot(data.frame(x_squared = (1:10)^2), aes(x_squared))
ggplot(data.frame(x = 1:10, x_squared = (1:10)^2), aes(x_squared))
ggplot(data.frame(x = 1:10, x_squared = (1:10)^2), aes(x, x_squared))
ggplot(data.frame(x = 1:10, x_squared = (1:10)^2), aes(x, x_squared)) + geom_point(size=5, shape="square", color="red", label = x_squared)  + geom_text() + labs(x="Not squared", y="Squared") + theme_bw()
choice(100, 2)
choose(100, 52)
choose(100, 52)/(2^100)
sample(0:1, 100, replace=TRUE)
sample(0:1, 100, TRUE)
sum(c(1, 2, 3))
set.seed(0)
exactly_30_heads_counter <- 0
simulations <- 10000
for (i in 1:simulations) {
if(sum(sample(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1), 300, TRUE)) == 30){
exactly_30_heads_counter <- 1 + exactly_30_heads_counter
}
}
print(exactly_30_heads_counter/simulations)
set.seed(1)
exactly_30_heads_counter <- 0
simulations <- 100000
for (i in 1:simulations) {
if(sum(sample(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1), 300, TRUE)) == 30){
exactly_30_heads_counter <- 1 + exactly_30_heads_counter
}
}
print(exactly_30_heads_counter/simulations)
set.seed(1)
exactly_30_heads_counter <- 0
simulations <- 100000
for (i in 1:simulations) {
if(sum(sample(c(0, 1), 300, TRUE)) == 150){
exactly_30_heads_counter <- 1 + exactly_30_heads_counter
}
}
print(exactly_30_heads_counter/simulations)
set.seed(1)
exactly_30_heads_counter <- 0
simulations <- 100000
for (i in 1:simulations) {
if(sum(sample(c(0, 1), 300, TRUE)) >= 150){
exactly_30_heads_counter <- 1 + exactly_30_heads_counter
}
}
print(exactly_30_heads_counter/simulations)
set.seed(1)
exactly_30_heads_counter <- 0
simulations <- 100000
for (i in 1:simulations) {
if(sum(sample(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1), 300, TRUE)) >= 300){
exactly_30_heads_counter <- 1 + exactly_30_heads_counter
}
}
print(exactly_30_heads_counter/simulations)
set.seed(1)
exactly_30_heads_counter <- 0
simulations <- 100000
for (i in 1:simulations) {
if(sum(sample(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1), 300, TRUE)) >= 30){
exactly_30_heads_counter <- 1 + exactly_30_heads_counter
}
}
print(exactly_30_heads_counter/simulations)
a <- 0
for(i in 30:300){
choose(300, i)((0.1)^i)(0.9)^(300-i)
}
a <- 0
for(i in 30:300){
choose(300, i) *((0.1)^i)*(0.9)^(300-i)
}
print(a)
a <- 0
for(i in 30:300){
a <- a + choose(300, i) *((0.1)^i)*(0.9)^(300-i)
}
print(a)
a <- 0
for(i in 150:300){
a <- a + choose(300, i) *((0.5)^i)*(0.5)^(300-i)
}
print(a)
choose(13,2) / choose(52,5)
13*12 / choose(52,5)
cards <- c()
cards <- append(cards, 1:13)
cards <- append(cards, 1:13)
cards <- append(cards, 1:13)
cards <- append(cards, 1:13)
print(cards)
2/ ((2)^4*6)
2/ ((2)^4*6)
(1 + choose(4,3)) / ((2)^4*6)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
convdf <- read.csv("testing2.csv")
convdf <- read.csv("testing2.csv")
cwd()
convdf <- read.csv("testing2.csv")
getwd()
setwd("C:/Users/zbtra/Documents/Sophomore/Spring/Research/AntForagingModel/")
convdf <- read.csv("results/testing2.csv")
convdf <- read.csv("results/testing2.csv")
#if it doesn't want to read it, put a space after the first "
View(convdf)
# Specify which path is chosen
convdf <- convdf %>% mutate(
Favored = colnames(convdf %>% select(Final.Ants.1, Final.Ants.2))[max.col(convdf %>% select(Final.Ants.1, Final.Ants.2),ties.method="first")]
)
library(magrittr)
library(magrittr)
convdf <- read.csv("results/testing2.csv")
#if it doesn't want to read it, put a space after the first "
View(convdf)
# Specify which path is chosen
convdf <- convdf %>% mutate(
Favored = colnames(convdf %>% select(Final.Ants.1, Final.Ants.2))[max.col(convdf %>% select(Final.Ants.1, Final.Ants.2),ties.method="first")]
)
library(tidyverse)
package. install.packages("scales")
package.install.packages("scales")
install.packages("scales")
install.packages('vctrs')
install.packages("vctrs")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
update.packages()
library(tidyverse)
update.packages('vctrs')
library(tidyverse)
update.packages(ask=FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
remove.packages('vctrs')
package.install('vctrs')
install.package('vctrs')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages('vctrs')
install.packages("vctrs")
library(tidyverse)
